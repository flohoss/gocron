// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: runs.sql

package jobs

import (
	"context"
	"database/sql"
	"strings"
)

const createRun = `-- name: CreateRun :one
INSERT INTO
    runs (job_name, status_id, start_time)
VALUES
    (?, ?, ?) RETURNING id, job_name, status_id, start_time, end_time
`

type CreateRunParams struct {
	JobName   string `json:"job_name"`
	StatusID  int64  `json:"status_id"`
	StartTime int64  `json:"start_time"`
}

func (q *Queries) CreateRun(ctx context.Context, arg CreateRunParams) (Run, error) {
	row := q.db.QueryRowContext(ctx, createRun, arg.JobName, arg.StatusID, arg.StartTime)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.JobName,
		&i.StatusID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteObsoleteRuns = `-- name: DeleteObsoleteRuns :exec
DELETE FROM runs
WHERE
    job_name NOT IN (/*SLICE:job_names*/?)
`

func (q *Queries) DeleteObsoleteRuns(ctx context.Context, jobNames []string) error {
	query := deleteObsoleteRuns
	var queryParams []interface{}
	if len(jobNames) > 0 {
		for _, v := range jobNames {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:job_names*/?", strings.Repeat(",?", len(jobNames))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:job_names*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const deleteOldRuns = `-- name: DeleteOldRuns :exec
DELETE FROM runs
WHERE
    start_time < ?
`

func (q *Queries) DeleteOldRuns(ctx context.Context, startTime int64) error {
	_, err := q.db.ExecContext(ctx, deleteOldRuns, startTime)
	return err
}

const getRuns = `-- name: GetRuns :many
SELECT
    id, job_name, status_id, start_time, end_time
FROM
    runs
WHERE
    job_name = ?
ORDER BY
    start_time DESC
LIMIT
    ?
`

type GetRunsParams struct {
	JobName string `json:"job_name"`
	Limit   int64  `json:"limit"`
}

func (q *Queries) GetRuns(ctx context.Context, arg GetRunsParams) ([]Run, error) {
	rows, err := q.db.QueryContext(ctx, getRuns, arg.JobName, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.ID,
			&i.JobName,
			&i.StatusID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isIdle = `-- name: IsIdle :one
SELECT
    CAST(
        NOT EXISTS (
            SELECT
                1
            FROM
                runs
            WHERE
                status_id = 1
        ) AS INTEGER
    ) AS is_idle
`

func (q *Queries) IsIdle(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, isIdle)
	var is_idle int64
	err := row.Scan(&is_idle)
	return is_idle, err
}

const updateRun = `-- name: UpdateRun :one
UPDATE runs
SET
    status_id = ?,
    end_time = ?
WHERE
    id = ? RETURNING id, job_name, status_id, start_time, end_time
`

type UpdateRunParams struct {
	StatusID int64         `json:"status_id"`
	EndTime  sql.NullInt64 `json:"end_time"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdateRun(ctx context.Context, arg UpdateRunParams) (Run, error) {
	row := q.db.QueryRowContext(ctx, updateRun, arg.StatusID, arg.EndTime, arg.ID)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.JobName,
		&i.StatusID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}
