// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: runs.sql

package jobs

import (
	"context"
	"database/sql"
)

const createRun = `-- name: CreateRun :one
INSERT INTO
    runs (job_id, status_id, start_time)
VALUES
    (?, ?, ?) RETURNING id, job_id, status_id, start_time, end_time
`

type CreateRunParams struct {
	JobID     string `json:"job_id"`
	StatusID  int64  `json:"status_id"`
	StartTime int64  `json:"start_time"`
}

func (q *Queries) CreateRun(ctx context.Context, arg CreateRunParams) (Run, error) {
	row := q.db.QueryRowContext(ctx, createRun, arg.JobID, arg.StatusID, arg.StartTime)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.StatusID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getRunsViewDetail = `-- name: GetRunsViewDetail :many
SELECT
    id, job_id, status_id, start_time, end_time, fmt_start_time, fmt_start_date, fmt_end_time, fmt_end_date, duration, logs
FROM
    runs_view
WHERE
    job_id = ?
ORDER BY
    start_time DESC
LIMIT
    20
`

func (q *Queries) GetRunsViewDetail(ctx context.Context, jobID string) ([]RunsView, error) {
	rows, err := q.db.QueryContext(ctx, getRunsViewDetail, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RunsView
	for rows.Next() {
		var i RunsView
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.StatusID,
			&i.StartTime,
			&i.EndTime,
			&i.FmtStartTime,
			&i.FmtStartDate,
			&i.FmtEndTime,
			&i.FmtEndDate,
			&i.Duration,
			&i.Logs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRunsViewHome = `-- name: GetRunsViewHome :many
SELECT
    id, job_id, status_id, start_time, end_time, fmt_start_time, fmt_start_date, fmt_end_time, fmt_end_date, duration, logs
FROM
    (
        SELECT
            id, job_id, status_id, start_time, end_time, fmt_start_time, fmt_start_date, fmt_end_time, fmt_end_date, duration, logs
        FROM
            runs_view
        WHERE
            job_id = ?
        ORDER BY
            start_time DESC
        LIMIT
            3
    ) subquery
ORDER BY
    start_time ASC
`

func (q *Queries) GetRunsViewHome(ctx context.Context, jobID string) ([]RunsView, error) {
	rows, err := q.db.QueryContext(ctx, getRunsViewHome, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RunsView
	for rows.Next() {
		var i RunsView
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.StatusID,
			&i.StartTime,
			&i.EndTime,
			&i.FmtStartTime,
			&i.FmtStartDate,
			&i.FmtEndTime,
			&i.FmtEndDate,
			&i.Duration,
			&i.Logs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRun = `-- name: UpdateRun :exec
UPDATE runs
SET
    status_id = ?,
    end_time = ?
WHERE
    id = ?
`

type UpdateRunParams struct {
	StatusID int64         `json:"status_id"`
	EndTime  sql.NullInt64 `json:"end_time"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdateRun(ctx context.Context, arg UpdateRunParams) error {
	_, err := q.db.ExecContext(ctx, updateRun, arg.StatusID, arg.EndTime, arg.ID)
	return err
}
