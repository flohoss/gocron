// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: runs.sql

package jobs

import (
	"context"
	"database/sql"
	"time"
)

const createRun = `-- name: CreateRun :one
INSERT INTO
    runs (job_id, status_id)
VALUES
    (?, ?) RETURNING id, job_id, status_id, start_time, end_time
`

type CreateRunParams struct {
	JobID    string `json:"job_id"`
	StatusID int64  `json:"status_id"`
}

func (q *Queries) CreateRun(ctx context.Context, arg CreateRunParams) (Run, error) {
	row := q.db.QueryRowContext(ctx, createRun, arg.JobID, arg.StatusID)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.StatusID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const listRuns = `-- name: ListRuns :many
SELECT
    id, job_id, status_id, start_time, end_time
FROM
    runs
WHERE
    job_id = ?
ORDER BY
    id DESC
`

func (q *Queries) ListRuns(ctx context.Context, jobID string) ([]Run, error) {
	rows, err := q.db.QueryContext(ctx, listRuns, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.StatusID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunsAndLogs = `-- name: ListRunsAndLogs :many
SELECT
    runs.id, job_id, status_id, start_time, end_time, logs.id, run_id, severity_id, message, created_at
FROM
    runs
    LEFT JOIN logs ON runs.id = logs.run_id
WHERE
    job_id = ?
ORDER BY
    logs.id DESC
LIMIT
    20
`

type ListRunsAndLogsRow struct {
	ID         int64          `json:"id"`
	JobID      string         `json:"job_id"`
	StatusID   int64          `json:"status_id"`
	StartTime  time.Time      `json:"start_time"`
	EndTime    sql.NullTime   `json:"end_time"`
	ID_2       sql.NullInt64  `json:"id_2"`
	RunID      sql.NullInt64  `json:"run_id"`
	SeverityID sql.NullInt64  `json:"severity_id"`
	Message    sql.NullString `json:"message"`
	CreatedAt  sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListRunsAndLogs(ctx context.Context, jobID string) ([]ListRunsAndLogsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRunsAndLogs, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRunsAndLogsRow
	for rows.Next() {
		var i ListRunsAndLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.StatusID,
			&i.StartTime,
			&i.EndTime,
			&i.ID_2,
			&i.RunID,
			&i.SeverityID,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRun = `-- name: UpdateRun :exec
UPDATE runs
SET
    status_id = ?,
    end_time = ?
WHERE
    id = ?
`

type UpdateRunParams struct {
	StatusID int64        `json:"status_id"`
	EndTime  sql.NullTime `json:"end_time"`
	ID       int64        `json:"id"`
}

func (q *Queries) UpdateRun(ctx context.Context, arg UpdateRunParams) error {
	_, err := q.db.ExecContext(ctx, updateRun, arg.StatusID, arg.EndTime, arg.ID)
	return err
}
