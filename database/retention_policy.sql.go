// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: retention_policy.sql

package database

import (
	"context"
)

const createRetentionPolicy = `-- name: CreateRetentionPolicy :one
INSERT INTO
    retention_policies (retention_policy)
VALUES
    (?) RETURNING retention_policy_id, retention_policy
`

func (q *Queries) CreateRetentionPolicy(ctx context.Context, retentionPolicy string) (RetentionPolicy, error) {
	row := q.db.QueryRowContext(ctx, createRetentionPolicy, retentionPolicy)
	var i RetentionPolicy
	err := row.Scan(&i.RetentionPolicyID, &i.RetentionPolicy)
	return i, err
}

const deleteRetentionPolicy = `-- name: DeleteRetentionPolicy :exec
DELETE FROM retention_policies
WHERE
    retention_policy_id = ?
`

func (q *Queries) DeleteRetentionPolicy(ctx context.Context, retentionPolicyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRetentionPolicy, retentionPolicyID)
	return err
}

const getRetentionPolicies = `-- name: GetRetentionPolicies :one
SELECT
    retention_policy_id, retention_policy
FROM
    retention_policies
WHERE
    retention_policy_id = ?
LIMIT
    1
`

func (q *Queries) GetRetentionPolicies(ctx context.Context, retentionPolicyID int64) (RetentionPolicy, error) {
	row := q.db.QueryRowContext(ctx, getRetentionPolicies, retentionPolicyID)
	var i RetentionPolicy
	err := row.Scan(&i.RetentionPolicyID, &i.RetentionPolicy)
	return i, err
}

const listRetentionPolicies = `-- name: ListRetentionPolicies :many
SELECT
    retention_policy_id, retention_policy
FROM
    retention_policies
ORDER BY
    retention_policy
`

func (q *Queries) ListRetentionPolicies(ctx context.Context) ([]RetentionPolicy, error) {
	rows, err := q.db.QueryContext(ctx, listRetentionPolicies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetentionPolicy
	for rows.Next() {
		var i RetentionPolicy
		if err := rows.Scan(&i.RetentionPolicyID, &i.RetentionPolicy); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRetentionPolicy = `-- name: UpdateRetentionPolicy :one
UPDATE retention_policies
SET
    retention_policy = ?
WHERE
    retention_policy_id = ? RETURNING retention_policy_id, retention_policy
`

type UpdateRetentionPolicyParams struct {
	RetentionPolicy   string
	RetentionPolicyID int64
}

func (q *Queries) UpdateRetentionPolicy(ctx context.Context, arg UpdateRetentionPolicyParams) (RetentionPolicy, error) {
	row := q.db.QueryRowContext(ctx, updateRetentionPolicy, arg.RetentionPolicy, arg.RetentionPolicyID)
	var i RetentionPolicy
	err := row.Scan(&i.RetentionPolicyID, &i.RetentionPolicy)
	return i, err
}
