// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetJobsData, GetJobsResponses, GetJobsErrors, PostJobsData, PostJobsResponses, PostJobsErrors, PostJobData, PostJobResponses, PostJobErrors, GetRunsData, GetRunsResponses, GetRunsErrors, GetVersionsData, GetVersionsResponses, GetVersionsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get jobs
 * Get jobs with run details but no logs.
 */
export const getJobs = <ThrowOnError extends boolean = false>(options?: Options<GetJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJobsResponses, GetJobsErrors, ThrowOnError>({
        url: '/api/jobs',
        ...options
    });
};

/**
 * Start jobs
 * Start all jobs in order of name.
 */
export const postJobs = <ThrowOnError extends boolean = false>(options?: Options<PostJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostJobsResponses, PostJobsErrors, ThrowOnError>({
        url: '/api/jobs',
        ...options
    });
};

/**
 * Start job
 * Start single job.
 */
export const postJob = <ThrowOnError extends boolean = false>(options: Options<PostJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostJobResponses, PostJobErrors, ThrowOnError>({
        url: '/api/jobs/{name}',
        ...options
    });
};

/**
 * Get runs
 * Get runs with logs for a job.
 */
export const getRuns = <ThrowOnError extends boolean = false>(options: Options<GetRunsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRunsResponses, GetRunsErrors, ThrowOnError>({
        url: '/api/runs/{job_name}',
        ...options
    });
};

/**
 * Get installed versions
 * Get installed versions of software.
 */
export const getVersions = <ThrowOnError extends boolean = false>(options?: Options<GetVersionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVersionsResponses, GetVersionsErrors, ThrowOnError>({
        url: '/api/versions',
        ...options
    });
};