package views

import (
	"github.com/dustin/go-humanize"
	"github.com/robfig/cron/v3"
	"gitlab.unjx.de/flohoss/gobackup/services"
	"gitlab.unjx.de/flohoss/gobackup/services/jobs"
	"gitlab.unjx.de/flohoss/gobackup/views/layout"
	"time"
)

func getStepColor(status services.Status) string {
	switch status {
	case services.Running:
		return "step-warning"
	case services.Stopped:
		return "step-error"
	case services.Finished:
		return "step-success"
	default:
		return "step-neutral"
	}
}

func getStepIcon(status services.Status) string {
	switch status {
	case services.Running:
		return "●"
	case services.Stopped:
		return "✕"
	case services.Finished:
		return "✓"
	default:
		return "?"
	}
}

func parseDuration(s string) string {
	if s == "" {
		return ""
	}
	d, _ := time.ParseDuration(s)
	return d.String()
}

func parseCron(s string, parser *cron.Parser) string {
	c, _ := parser.Parse(s)
	return humanize.Time(c.Next(time.Now()))
}

templ Home(resultSet []jobs.JobsView, parser *cron.Parser) {
	<style>
		.steps .step::before {
			height: 0.2rem !important;
		}
	</style>
	<div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
		for _, result := range resultSet {
			<a class="flex justify-between items-center hover-link" href={ templ.URL("/" + result.ID) }>
				<div>
					<div class="text-primary text-3xl font-medium truncate">{ result.Name }</div>
					<div class="text-base text-md truncate">{ parseCron(result.Cron, parser) }</div>
				</div>
				<div class="text-sm">
					<ul class="steps hidden lg:flex">
						for _,run := range result.Runs.([]jobs.RunsView) {
							if run.FmtStartDate.Valid {
								<li data-content={ getStepIcon(services.Status(run.StatusID)) } class={ "step", getStepColor(services.Status(run.StatusID)) }>{ parseDuration(run.Duration.String) }</li>
							}
						}
					</ul>
					<ul class="steps lg:hidden">
						{{ last := len(result.Runs.([]jobs.RunsView)) - 1 }}
						if last >= 0 && result.Runs.([]jobs.RunsView)[last].FmtStartDate.Valid {
							<li data-content={ getStepIcon(services.Status(result.Runs.([]jobs.RunsView)[last].StatusID)) } class={ "step", getStepColor(services.Status(result.Runs.([]jobs.RunsView)[last].StatusID)) }>{ parseDuration(result.Runs.([]jobs.RunsView)[last].Duration.String) }</li>
						}
					</ul>
				</div>
			</a>
		}
	</div>
}

templ HomeIndex(
	templateJob *services.TemplateJob,
	cmp templ.Component,
) {
	@layout.Base(templateJob) {
		@cmp
	}
}
