package views

import (
	"github.com/dustin/go-humanize"
	"github.com/robfig/cron/v3"
	"gitlab.unjx.de/flohoss/gobackup/services"
	"gitlab.unjx.de/flohoss/gobackup/services/jobs"
	"gitlab.unjx.de/flohoss/gobackup/views/layout"
	"time"
)

func getStepColor(status services.Status) string {
	switch status {
	case services.Running:
		return "step-warning"
	case services.Stopped:
		return "step-error"
	case services.Finished:
		return "step-success"
	default:
		return "step-neutral"
	}
}

func getStepIcon(status services.Status) string {
	switch status {
	case services.Running:
		return "●"
	case services.Stopped:
		return "✕"
	case services.Finished:
		return "✓"
	default:
		return "?"
	}
}

func parseDuration(s string) string {
	if s == "" {
		return ""
	}
	d, _ := time.ParseDuration(s)
	return d.String()
}

func parseCron(s string, parser *cron.Parser) string {
	c, _ := parser.Parse(s)
	return humanize.Time(c.Next(time.Now()))
}

templ Home(resultSet []jobs.JobsView, parser *cron.Parser) {
	<style>
		.steps .step::before {
			height: 0.2rem !important;
		}
	</style>
	<div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
		for _, result := range resultSet {
			<a class="flex items-center justify-between opacity-80 hover:opacity-100 hover:ease-out duration-150" href={ templ.URL("/" + result.ID) }>
				<div class="stat p-0">
					<div class="stat-figure">
						<ul class="steps hidden lg:flex">
							for _,run := range result.Runs.([]jobs.RunsView) {
								if run.StartDate.Valid {
									<li data-content={ getStepIcon(services.Status(run.StatusID)) } class={ "step", getStepColor(services.Status(run.StatusID)) }>{ parseDuration(run.Duration.String) }</li>
								}
							}
						</ul>
						<ul class="steps lg:hidden">
							if result.Runs.([]jobs.RunsView)[0].StartDate.Valid {
								<li data-content={ getStepIcon(services.Status(result.Runs.([]jobs.RunsView)[0].StatusID)) } class={ "step", getStepColor(services.Status(result.Runs.([]jobs.RunsView)[0].StatusID)) }>{ parseDuration(result.Runs.([]jobs.RunsView)[0].Duration.String) }</li>
							}
						</ul>
					</div>
					<div class="stat-value text-primary text-3xl font-medium truncate">{ result.Name }</div>
					<div class="stat-desc text-base truncate">{ parseCron(result.Cron, parser) }</div>
				</div>
			</a>
		}
	</div>
}

templ HomeIndex(
	templateJob *services.TemplateJob,
	cmp templ.Component,
) {
	@layout.Base(templateJob) {
		@cmp
	}
}
