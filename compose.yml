services:
  app:
    restart: always
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    command: >
      air 
      --build.cmd "go build -o tmp/bin/main cmd/main.go" 
      --build.include_ext "go"
      --build.exclude_dir "web,docs"
      --build.exclude_regex "^.*\.templ$"
      --build.bin "tmp/bin/main" 
      --build.delay "100" 
      --build.stop_on_error "false" 
      --misc.clean_on_exit true
    hostname: gobackup
    volumes:
      - ./:/app/
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Europe/Berlin
      - NTFY_URL=https://ntfy.hoss.it/
      - NTFY_TOPIC=Backup
    ports:
      - 8156:8156
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8156']
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 5s

  frontend:
    restart: always
    image: node:lts
    working_dir: /app
    command: sh -c "yarn install && yarn dev"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./docs:/docs/:ro
      - ./web:/app/
    ports:
      - 5173:5173

  types:
    profiles:
      - dev
    build:
      context: .
      dockerfile_inline: |
        FROM golang:1.23
        RUN wget -qO- https://deb.nodesource.com/setup_22.x -O setup.sh
        RUN bash setup.sh

        RUN apt-get update && apt-get install -y nodejs
        RUN npm install -g yarn

        RUN go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest
        RUN go install github.com/swaggo/swag/cmd/swag@latest

        WORKDIR /app
    command: sh -c "sqlc generate && swag fmt && swag init --dir /app/cmd,/app/handlers,/app/services --parseDependency --requiredByDefault && (cd /app/web && yarn && yarn types)"
    volumes:
      - ./:/app/

  # templ:
  #   restart: always
  #   build:
  #     context: .
  #     dockerfile_inline: |
  #       FROM golang:1.23-alpine
  #       WORKDIR /app
  #       RUN go install github.com/a-h/templ/cmd/templ@latest
  #   command: templ generate --watch --proxybind="0.0.0.0" --proxy="http://app:8156" --open-browser=false
  #   volumes:
  #     - ./views:/app/views
  #     - ./go.mod:/app/go.mod:ro
  #   depends_on:
  #     app:
  #       condition: service_healthy
  #   ports:
  #     - 7331:7331

  # node:
  #   restart: always
  #   build:
  #     context: .
  #     dockerfile_inline: |
  #       FROM node:lts-alpine
  #       WORKDIR /app
  #       COPY ./package.json ./yarn.lock ./
  #       RUN yarn install --frozen-lockfile
  #   command: sh -c "cp node_modules/alpinejs/dist/cdn.min.js assets/js/alpine.min.js && npx @tailwindcss/cli -i tailwind.css -o assets/css/main.css --watch"
  #   tty: true
  #   volumes:
  #     - ./views:/app/views
  #     - ./tailwind.css:/app/tailwind.css:ro
  #     - ./assets:/app/assets
