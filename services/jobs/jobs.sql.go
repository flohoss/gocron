// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jobs.sql

package jobs

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO
    jobs (id, name, cron)
VALUES
    (?, ?, ?) RETURNING id, name, cron
`

type CreateJobParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Cron string `json:"cron"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob, arg.ID, arg.Name, arg.Cron)
	var i Job
	err := row.Scan(&i.ID, &i.Name, &i.Cron)
	return i, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE
    id = ?
`

func (q *Queries) DeleteJob(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteJob, id)
	return err
}

const getJob = `-- name: GetJob :one
SELECT
    id, name, cron
FROM
    jobs
WHERE
    id = ?
`

func (q *Queries) GetJob(ctx context.Context, id string) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i Job
	err := row.Scan(&i.ID, &i.Name, &i.Cron)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT
    id, name, cron
FROM
    jobs
ORDER BY
    name
`

func (q *Queries) ListJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(&i.ID, &i.Name, &i.Cron); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsAndLatestRun = `-- name: ListJobsAndLatestRun :many
SELECT
    j.id,
    j.name,
    j.cron,
    r.start_time,
    r.end_time,
    r.status_id
FROM
    jobs j
    LEFT JOIN runs r ON j.id = r.job_id
    AND r.id = (
        SELECT
            MAX(id)
        FROM
            runs
        WHERE
            runs.job_id = j.id
    )
ORDER BY
    name
`

type ListJobsAndLatestRunRow struct {
	ID        string        `json:"id"`
	Name      string        `json:"name"`
	Cron      string        `json:"cron"`
	StartTime sql.NullTime  `json:"start_time"`
	EndTime   sql.NullTime  `json:"end_time"`
	StatusID  sql.NullInt64 `json:"status_id"`
}

func (q *Queries) ListJobsAndLatestRun(ctx context.Context) ([]ListJobsAndLatestRunRow, error) {
	rows, err := q.db.QueryContext(ctx, listJobsAndLatestRun)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListJobsAndLatestRunRow
	for rows.Next() {
		var i ListJobsAndLatestRunRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cron,
			&i.StartTime,
			&i.EndTime,
			&i.StatusID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
UPDATE jobs
SET
    name = ?,
    cron = ?
WHERE
    id = ?
`

type UpdateJobParams struct {
	Name string `json:"name"`
	Cron string `json:"cron"`
	ID   string `json:"id"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.ExecContext(ctx, updateJob, arg.Name, arg.Cron, arg.ID)
	return err
}
