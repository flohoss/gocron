// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package jobs

import (
	"context"
)

const createJob = `-- name: CreateJob :one
INSERT INTO
    jobs (name)
VALUES
    (?) RETURNING name
`

func (q *Queries) CreateJob(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, createJob, name)
	err := row.Scan(&name)
	return name, err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE
    name = ?
`

func (q *Queries) DeleteJob(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteJob, name)
	return err
}

const getJob = `-- name: GetJob :one
SELECT
    name
FROM
    jobs
WHERE
    name = ?
`

func (q *Queries) GetJob(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getJob, name)
	err := row.Scan(&name)
	return name, err
}

const listJobs = `-- name: ListJobs :many
SELECT
    name
FROM
    jobs
ORDER BY
    name
`

func (q *Queries) ListJobs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
