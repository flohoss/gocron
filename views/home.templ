package views

import (
	"fmt"
	"gitlab.unjx.de/flohoss/gobackup/services"
	"gitlab.unjx.de/flohoss/gobackup/services/jobs"
	"gitlab.unjx.de/flohoss/gobackup/views/layout"
	"os"
	"time"
)

func calcDuration(start time.Time, end time.Time) string {
	if start.IsZero() || end.IsZero() {
		return ""
	}

	return `<div class="badge badge-primary">` + fmt.Sprintf("~%.2fm", end.Sub(start).Minutes()) + `</div>`
}

func formatTime(t time.Time, job jobs.ListJobsAndLatestRunRow) string {
	// If the time is zero, return an empty string
	if t.IsZero() {
		return ""
	}

	// Get the TZ environment variable
	tz := os.Getenv("TZ")
	if tz == "" {
		// If the TZ environment variable is not set, fallback to the local time
		tz = "Local"
	}

	// Load the location from the TZ environment variable
	location, err := time.LoadLocation(tz)
	if err != nil {
		// If there's an error loading the location, return the original time in UTC
		return fmt.Sprintf("<div class='badge badge-neutral'>%s</div>", t.UTC().Format("2006-01-02 15:04"))
	}

	// Convert the time to the local time zone
	localTime := t.In(location)

	// Return the formatted time within a div
	return fmt.Sprintf("<div class='badge %s'>%s</div>", badgeColor(services.Status(job.StatusID.Int64)), localTime.Format("2006-01-02 15:04"))
}

func badgeColor(status services.Status) string {
	switch status {
	case services.Running:
		return "badge-primary"
	case services.Stopped:
		return "badge-error"
	default:
		return "badge-neutral"
	}
}

templ Home(jobsAndRuns []jobs.ListJobsAndLatestRunRow) {
	<div class="flex flex-col gap-5">
		for _, job := range jobsAndRuns {
			<a class={ "hover:bg-neutral", "duration-150", "hover:ease-out", "rounded-lg", "py-3", "px-5", "flex", "w-full", "items-center", "justify-between", "border" , "border-neutral" } href={ templ.URL("/" + job.Name) }>
				<div class="text-lg truncate">{ job.Name }</div>
				<div class="flex gap-2 whitespace-nowrap">
					@templ.Raw(formatTime(job.StartTime.Time, job))
					@templ.Raw(calcDuration(job.StartTime.Time, job.EndTime.Time))
				</div>
			</a>
		}
	</div>
}

templ HomeIndex(
	cmp templ.Component,
) {
	@layout.Base("Home") {
		@cmp
	}
}
